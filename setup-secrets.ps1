# ==========================================
# üîß Script de Configuration des Secrets
# Chronique des Mondes - Setup Automatique
# ==========================================

Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "  Chronique des Mondes - Setup" -ForegroundColor Cyan
Write-Host "  Configuration des Secrets" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path "Cdm/Cdm.Common/Cdm.Common.csproj")) {
    Write-Host "‚ùå Erreur : Ce script doit √™tre ex√©cut√© depuis la racine du projet." -ForegroundColor Red
    Write-Host "   R√©pertoire actuel : $(Get-Location)" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ R√©pertoire du projet d√©tect√©" -ForegroundColor Green
Write-Host ""

# ==========================================
# 1. G√©n√©rer JWT Secret Key
# ==========================================

Write-Host "üîê G√©n√©ration de la cl√© JWT..." -ForegroundColor Yellow

$jwtSecretKey = [Convert]::ToBase64String([System.Security.Cryptography.RandomNumberGenerator]::GetBytes(64))

Write-Host "‚úÖ Cl√© JWT g√©n√©r√©e : " -ForegroundColor Green -NoNewline
Write-Host $jwtSecretKey.Substring(0, 20) -ForegroundColor Gray -NoNewline
Write-Host "..." -ForegroundColor Gray
Write-Host ""

# ==========================================
# 2. Configuration SQL Server
# ==========================================

Write-Host "üìä Configuration de la base de donn√©es SQL Server" -ForegroundColor Yellow
Write-Host ""
Write-Host "Choisissez le type d'authentification :" -ForegroundColor Cyan
Write-Host "  1) Authentification Windows (Trusted_Connection)" -ForegroundColor White
Write-Host "  2) SQL Server Authentication (login/password)" -ForegroundColor White
Write-Host ""

$authChoice = Read-Host "Votre choix (1 ou 2)"

if ($authChoice -eq "1") {
    # Authentification Windows
    $connectionString = "Server=localhost;Database=ChroniqueDesMondes;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=True;"
    Write-Host "‚úÖ Authentification Windows configur√©e" -ForegroundColor Green
}
elseif ($authChoice -eq "2") {
    # SQL Server Authentication
    Write-Host ""
    $sqlServer = Read-Host "Serveur SQL (d√©faut: localhost)"
    if ([string]::IsNullOrWhiteSpace($sqlServer)) { $sqlServer = "localhost" }
    
    $sqlPort = Read-Host "Port SQL (d√©faut: 1433)"
    if ([string]::IsNullOrWhiteSpace($sqlPort)) { $sqlPort = "1433" }
    
    $sqlUser = Read-Host "Nom d'utilisateur SQL (d√©faut: sa)"
    if ([string]::IsNullOrWhiteSpace($sqlUser)) { $sqlUser = "sa" }
    
    $sqlPassword = Read-Host "Mot de passe SQL" -AsSecureString
    $sqlPasswordPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
        [Runtime.InteropServices.Marshal]::SecureStringToBSTR($sqlPassword)
    )
    
    $connectionString = "Server=$sqlServer,$sqlPort;Database=ChroniqueDesMondes;User Id=$sqlUser;Password=$sqlPasswordPlain;TrustServerCertificate=True;Encrypt=False;MultipleActiveResultSets=True;"
    Write-Host "‚úÖ Authentification SQL Server configur√©e" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Choix invalide. Utilisation de l'authentification Windows par d√©faut." -ForegroundColor Red
    $connectionString = "Server=localhost;Database=ChroniqueDesMondes;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=True;"
}

Write-Host ""

# ==========================================
# 3. Configuration Azure Communication Services (optionnel)
# ==========================================

Write-Host "üìß Configuration Azure Communication Services (optionnel)" -ForegroundColor Yellow
Write-Host "   Utilis√© pour envoyer des emails d'invitation aux sessions" -ForegroundColor Gray
Write-Host ""
$configureAzure = Read-Host "Voulez-vous configurer Azure Communication Services maintenant ? (o/N)"

$azureConnectionString = ""
$azureSenderEmail = ""

if ($configureAzure -eq "o" -or $configureAzure -eq "O") {
    Write-Host ""
    $azureConnectionString = Read-Host "Connection String Azure Communication"
    $azureSenderEmail = Read-Host "Email de l'exp√©diteur (ex: noreply@votredomaine.com)"
    Write-Host "‚úÖ Azure Communication Services configur√©" -ForegroundColor Green
}
else {
    Write-Host "‚è≠Ô∏è  Configuration Azure ignor√©e (vous pourrez la configurer plus tard)" -ForegroundColor Yellow
}

Write-Host ""

# ==========================================
# 4. Appliquer les User Secrets
# ==========================================

Write-Host "üíæ Application des User Secrets au projet..." -ForegroundColor Yellow
Write-Host ""

Push-Location "Cdm/Cdm.Common"

try {
    # Initialiser User Secrets si n√©cessaire
    Write-Host "   Initialisation des User Secrets..." -ForegroundColor Gray
    dotnet user-secrets init 2>&1 | Out-Null
    
    # Connection String
    Write-Host "   ‚úì Configuration de la connection string..." -ForegroundColor Gray
    dotnet user-secrets set "ConnectionStrings:DefaultConnection" $connectionString | Out-Null
    
    # JWT
    Write-Host "   ‚úì Configuration JWT..." -ForegroundColor Gray
    dotnet user-secrets set "Jwt:SecretKey" $jwtSecretKey | Out-Null
    dotnet user-secrets set "Jwt:Issuer" "Cdm.ApiService" | Out-Null
    dotnet user-secrets set "Jwt:Audience" "Cdm.Web" | Out-Null
    dotnet user-secrets set "Jwt:ExpiryDays" "7" | Out-Null
    
    # Azure (si configur√©)
    if (-not [string]::IsNullOrWhiteSpace($azureConnectionString)) {
        Write-Host "   ‚úì Configuration Azure Communication Services..." -ForegroundColor Gray
        dotnet user-secrets set "AzureCommunication:ConnectionString" $azureConnectionString | Out-Null
        dotnet user-secrets set "AzureCommunication:SenderEmail" $azureSenderEmail | Out-Null
    }
    
    Write-Host ""
    Write-Host "‚úÖ User Secrets configur√©s avec succ√®s !" -ForegroundColor Green
    Write-Host ""
    
    # Afficher les secrets configur√©s (sans valeurs sensibles)
    Write-Host "üìã R√©sum√© de la configuration :" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Connection String: ***configur√©e***" -ForegroundColor White
    Write-Host "   ‚Ä¢ JWT Secret Key: ***configur√©e***" -ForegroundColor White
    Write-Host "   ‚Ä¢ JWT Issuer: Cdm.ApiService" -ForegroundColor White
    Write-Host "   ‚Ä¢ JWT Audience: Cdm.Web" -ForegroundColor White
    Write-Host "   ‚Ä¢ JWT Expiry: 7 jours" -ForegroundColor White
    
    if (-not [string]::IsNullOrWhiteSpace($azureConnectionString)) {
        Write-Host "   ‚Ä¢ Azure Communication: ***configur√©e***" -ForegroundColor White
        Write-Host "   ‚Ä¢ Sender Email: $azureSenderEmail" -ForegroundColor White
    }
    
    Write-Host ""
    
    # Afficher le chemin du fichier secrets.json
    Write-Host "üìÅ Emplacement des secrets :" -ForegroundColor Cyan
    $secretsPath = dotnet user-secrets list --verbose 2>&1 | Select-String "UserSecretsId:" | ForEach-Object { $_.ToString() -replace "UserSecretsId: ", "" }
    if ($secretsPath) {
        $fullPath = "$env:APPDATA\Microsoft\UserSecrets\$secretsPath\secrets.json"
        Write-Host "   $fullPath" -ForegroundColor Gray
    }
    
}
catch {
    Write-Host ""
    Write-Host "‚ùå Erreur lors de la configuration des secrets" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    Pop-Location
    exit 1
}
finally {
    Pop-Location
}

Write-Host ""

# ==========================================
# 5. Prochaines √©tapes
# ==========================================

Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "  üéâ Configuration termin√©e !" -ForegroundColor Green
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Prochaines √©tapes :" -ForegroundColor Yellow
Write-Host ""
Write-Host "1Ô∏è‚É£  Cr√©er la base de donn√©es :" -ForegroundColor Cyan
Write-Host "    cd Cdm/Cdm.Migrations" -ForegroundColor White
Write-Host "    dotnet ef database update --context MigrationsContext" -ForegroundColor White
Write-Host ""
Write-Host "2Ô∏è‚É£  Lancer l'application :" -ForegroundColor Cyan
Write-Host "    dotnet run --project Cdm/Cdm.AppHost" -ForegroundColor White
Write-Host ""
Write-Host "3Ô∏è‚É£  Acc√©der au dashboard Aspire :" -ForegroundColor Cyan
Write-Host "    https://localhost:17223" -ForegroundColor White
Write-Host ""
Write-Host "üìö Pour plus d'informations, consultez CONFIGURATION.md" -ForegroundColor Gray
Write-Host ""

# ==========================================
# 6. Demander si on lance la cr√©ation de la DB
# ==========================================

$createDb = Read-Host "Voulez-vous cr√©er la base de donn√©es maintenant ? (o/N)"

if ($createDb -eq "o" -or $createDb -eq "O") {
    Write-Host ""
    Write-Host "üìä Cr√©ation de la base de donn√©es..." -ForegroundColor Yellow
    Write-Host ""
    
    Push-Location "Cdm/Cdm.Migrations"
    
    try {
        dotnet ef database update --context MigrationsContext
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host ""
            Write-Host "‚úÖ Base de donn√©es cr√©√©e avec succ√®s !" -ForegroundColor Green
        }
        else {
            Write-Host ""
            Write-Host "‚ùå Erreur lors de la cr√©ation de la base de donn√©es" -ForegroundColor Red
            Write-Host "   V√©rifiez que SQL Server est d√©marr√© et accessible" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host ""
        Write-Host "‚ùå Erreur : $_" -ForegroundColor Red
    }
    finally {
        Pop-Location
    }
}

Write-Host ""
Write-Host "‚ú® Setup termin√© ! Bon d√©veloppement ! ‚ú®" -ForegroundColor Green
Write-Host ""
