@page "/profile"
@using Cdm.Business.Abstraction.DTOs.ViewModels
@using Cdm.Business.Abstraction.DTOs.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Mon Profil</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">
                        <i class="bi bi-person-circle"></i> Mon Profil
                    </h3>
                </div>
                <div class="card-body">
                    @if (profile == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Chargement...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <ProfileEditor Profile="profile" 
                                     OnSave="HandleSaveAsync" 
                                     OnAvatarUpload="HandleAvatarUploadAsync" />
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                            <i class="bi bi-check-circle-fill"></i> @successMessage
                            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                            <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private ILogger<Profile> Logger { get; set; } = default!;

    private ProfileResponse? profile;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfileAsync();
    }

    private async Task LoadProfileAsync()
    {
        try
        {
            profile = await Http.GetFromJsonAsync<ProfileResponse>("api/users/profile");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading profile");
            errorMessage = "Erreur lors du chargement du profil";
        }
    }

    private async Task HandleSaveAsync(UpdateProfileRequest request)
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;

        try
        {
            var response = await Http.PutAsJsonAsync("api/users/profile", request);
            
            if (response.IsSuccessStatusCode)
            {
                profile = await response.Content.ReadFromJsonAsync<ProfileResponse>();
                successMessage = "Profil mis à jour avec succès !";
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                errorMessage = error?["error"] ?? "Erreur lors de la mise à jour du profil";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating profile");
            errorMessage = "Erreur lors de la mise à jour du profil";
        }
    }

    private async Task HandleAvatarUploadAsync(IBrowserFile file)
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;

        try
        {
            const long maxFileSize = 2 * 1024 * 1024; // 2MB
            
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            var response = await Http.PostAsync("api/users/profile/avatar", content);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (result != null && result.TryGetValue("avatarUrl", out var avatarUrl))
                {
                    if (profile != null)
                    {
                        profile.AvatarUrl = avatarUrl;
                    }
                    successMessage = "Avatar mis à jour avec succès !";
                }
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                errorMessage = error?["error"] ?? "Erreur lors de l'upload de l'avatar";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading avatar");
            errorMessage = "Erreur lors de l'upload de l'avatar";
        }
    }
}
